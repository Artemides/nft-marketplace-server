/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace NFTMarket {
  export type MarketNftStruct = { price: BigNumberish; owner: AddressLike };

  export type MarketNftStructOutput = [price: bigint, owner: string] & {
    price: bigint;
    owner: string;
  };
}

export interface NFTMarketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balanceOf"
      | "getNft"
      | "listNft"
      | "purchaseNft"
      | "unlistNft"
      | "updateNftPrice"
      | "withdrawBalance"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "NFTListenOn"
      | "NFTPriceUpdated"
      | "NFTPurchased"
      | "NFTUnlisted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNft",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listNft",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseNft",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlistNft",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNftPrice",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlistNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateNftPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance",
    data: BytesLike
  ): Result;
}

export namespace NFTListenOnEvent {
  export type InputTuple = [
    nftAddress: AddressLike,
    tokenId: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    nftAddress: string,
    tokenId: bigint,
    price: bigint
  ];
  export interface OutputObject {
    nftAddress: string;
    tokenId: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTPriceUpdatedEvent {
  export type InputTuple = [
    nftAddress: AddressLike,
    tokenId: BigNumberish,
    oldPrice: BigNumberish,
    newPrice: BigNumberish
  ];
  export type OutputTuple = [
    nftAddress: string,
    tokenId: bigint,
    oldPrice: bigint,
    newPrice: bigint
  ];
  export interface OutputObject {
    nftAddress: string;
    tokenId: bigint;
    oldPrice: bigint;
    newPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTPurchasedEvent {
  export type InputTuple = [
    nftAddress: AddressLike,
    tokenId: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    nftAddress: string,
    tokenId: bigint,
    price: bigint
  ];
  export interface OutputObject {
    nftAddress: string;
    tokenId: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTUnlistedEvent {
  export type InputTuple = [nftAddress: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [nftAddress: string, tokenId: bigint];
  export interface OutputObject {
    nftAddress: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NFTMarket extends BaseContract {
  connect(runner?: ContractRunner | null): NFTMarket;
  waitForDeployment(): Promise<this>;

  interface: NFTMarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceOf: TypedContractMethod<[seller: AddressLike], [bigint], "view">;

  getNft: TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish],
    [NFTMarket.MarketNftStructOutput],
    "view"
  >;

  listNft: TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  purchaseNft: TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;

  unlistNft: TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateNftPrice: TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish, newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawBalance: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[seller: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNft"
  ): TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish],
    [NFTMarket.MarketNftStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "listNft"
  ): TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "purchaseNft"
  ): TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unlistNft"
  ): TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateNftPrice"
  ): TypedContractMethod<
    [nftAddress: AddressLike, tokenId: BigNumberish, newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawBalance"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "NFTListenOn"
  ): TypedContractEvent<
    NFTListenOnEvent.InputTuple,
    NFTListenOnEvent.OutputTuple,
    NFTListenOnEvent.OutputObject
  >;
  getEvent(
    key: "NFTPriceUpdated"
  ): TypedContractEvent<
    NFTPriceUpdatedEvent.InputTuple,
    NFTPriceUpdatedEvent.OutputTuple,
    NFTPriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NFTPurchased"
  ): TypedContractEvent<
    NFTPurchasedEvent.InputTuple,
    NFTPurchasedEvent.OutputTuple,
    NFTPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "NFTUnlisted"
  ): TypedContractEvent<
    NFTUnlistedEvent.InputTuple,
    NFTUnlistedEvent.OutputTuple,
    NFTUnlistedEvent.OutputObject
  >;

  filters: {
    "NFTListenOn(address,uint256,uint256)": TypedContractEvent<
      NFTListenOnEvent.InputTuple,
      NFTListenOnEvent.OutputTuple,
      NFTListenOnEvent.OutputObject
    >;
    NFTListenOn: TypedContractEvent<
      NFTListenOnEvent.InputTuple,
      NFTListenOnEvent.OutputTuple,
      NFTListenOnEvent.OutputObject
    >;

    "NFTPriceUpdated(address,uint256,uint256,uint256)": TypedContractEvent<
      NFTPriceUpdatedEvent.InputTuple,
      NFTPriceUpdatedEvent.OutputTuple,
      NFTPriceUpdatedEvent.OutputObject
    >;
    NFTPriceUpdated: TypedContractEvent<
      NFTPriceUpdatedEvent.InputTuple,
      NFTPriceUpdatedEvent.OutputTuple,
      NFTPriceUpdatedEvent.OutputObject
    >;

    "NFTPurchased(address,uint256,uint256)": TypedContractEvent<
      NFTPurchasedEvent.InputTuple,
      NFTPurchasedEvent.OutputTuple,
      NFTPurchasedEvent.OutputObject
    >;
    NFTPurchased: TypedContractEvent<
      NFTPurchasedEvent.InputTuple,
      NFTPurchasedEvent.OutputTuple,
      NFTPurchasedEvent.OutputObject
    >;

    "NFTUnlisted(address,uint256)": TypedContractEvent<
      NFTUnlistedEvent.InputTuple,
      NFTUnlistedEvent.OutputTuple,
      NFTUnlistedEvent.OutputObject
    >;
    NFTUnlisted: TypedContractEvent<
      NFTUnlistedEvent.InputTuple,
      NFTUnlistedEvent.OutputTuple,
      NFTUnlistedEvent.OutputObject
    >;
  };
}
